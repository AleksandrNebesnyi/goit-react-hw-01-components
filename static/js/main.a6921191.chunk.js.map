{"version":3,"sources":["components/Profile/Profile.module.css","components/TransactionHistory/TransactionHistory.module.css","components/FriendListItem/FriendListItem.module.css","components/Statistics/Statistics.module.css","components/TransactionItem/TransactionItem.module.css","components/StatisticsItem/StatisticItem.module.css","components/FriendList/FriendList.module.css","components/Profile/Profile.jsx","components/FriendListItem/FriendListItem.jsx","components/FriendList/FriendList.jsx","components/StatisticsItem/StatisticsItem.jsx","components/Statistics/Statistics.jsx","components/TransactionItem/TransactionItem.jsx","components/TransactionHistory/TransactionHistory.jsx","App.js","index.js"],"names":["module","exports","Profile","username","tag","location","avatar","stats","className","s","profile","description","src","alt","name","item","label","quantity","followers","views","likes","FriendListItem","isOnline","keyId","online","offline","width","FriendList","friends","map","id","prototype","PropTypes","arrayOf","shape","string","isRequired","StatisticsItem","percentage","number","Statistics","title","length","statistics","toUpperCase","stat","defaultProps","TransactionItem","type","amount","currency","cell","TransactionHistory","items","transactions","App","user","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6921191.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2Zpl1\",\"description\":\"Profile_description__YzoIn\",\"avatar\":\"Profile_avatar__NSU2h\",\"name\":\"Profile_name__2m0uw\",\"tag\":\"Profile_tag__3OMfs\",\"location\":\"Profile_location__ZPTZv\",\"stats\":\"Profile_stats__plItf\",\"item\":\"Profile_item__Ss1Pl\",\"label\":\"Profile_label__d9iIT\",\"quantity\":\"Profile_quantity__1BsC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transaction-history\":\"TransactionHistory_transaction-history__2oWPE\",\"transaction-head\":\"TransactionHistory_transaction-head__sjHeE\",\"transaction-title\":\"TransactionHistory_transaction-title__33U6P\",\"transaction-row\":\"TransactionHistory_transaction-row__wxW_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"FriendListItem_status__18B6N\",\"item\":\"FriendListItem_item__iqMdk\",\"online\":\"FriendListItem_online__938wK FriendListItem_status__18B6N\",\"offline\":\"FriendListItem_offline__3cRaE FriendListItem_status__18B6N\",\"avatar\":\"FriendListItem_avatar__9jqgC\",\"name\":\"FriendListItem_name__3x7UG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__1DMZ4\",\"title\":\"Statistics_title__3Pfnj\",\"stat-list\":\"Statistics_stat-list__QOlsB\",\"item\":\"Statistics_item__AgH0t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"TransactionItem_cell__3fPK9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"StatisticItem_label__2jkqe\",\"percentage\":\"StatisticItem_percentage__3xdHg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend-list\":\"FriendList_friend-list__1GF4P\"};","// Компонент должен принимать несколько пропсов с информацией о пользователе:\r\n\r\n// username — имя пользователя\r\n// tag — тег в социальной сети без @\r\n// location — город и страна\r\n// avatar — ссылка на изображение\r\n// stats — объект с информацией об активности\r\n// Компонент должен создавать DOM элемент следующей структуры.\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport s from './Profile.module.css'\r\n\r\nconst Profile = ({ username, tag, location, avatar, stats }) => {\r\n  return (\r\n    <div className={s.profile}>\r\n      <div className={s.description}>\r\n        <img src={avatar} alt=\"User avatar\" className={s.avatar} />\r\n        <p className={s.name}>{username}</p>\r\n        <p className={s.tag}>@{tag}</p>\r\n        <p className={s.location}>{location}</p>\r\n      </div>\r\n\r\n      <ul className={s.stats}>\r\n        <li className={s.item}>\r\n          <span className={s.label}>Followers</span>\r\n          <span className={s.quantity}>{stats.followers}</span>\r\n        </li>\r\n        <li className={s.item}> \r\n          <span className={s.label}>Views</span>\r\n          <span className={s.quantity}>{stats.views}</span>\r\n        </li>\r\n        <li className={s.item}>\r\n          <span className={s.label}>Likes</span>\r\n          <span className={s.quantity}>{stats.likes}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  avatar: PropTypes.string,\r\n  username: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  stats: PropTypes.objectOf(PropTypes.number).isRequired,\r\n};\r\n\r\nexport default Profile;\r\n","import PropTypes from \"prop-types\";\r\nimport s from './FriendListItem.module.css'\r\n\r\nconst FriendListItem = ({ avatar, name, isOnline, keyId  }) => (\r\n  <li key={keyId} className={s.item} >\r\n    <span className={isOnline ? s.online : s.offline}></span>\r\n    <img className={s.avatar} src={avatar} alt={name} width=\"60\" />\r\n    <p className={s.name}>{name}</p>\r\n  </li>\r\n);\r\n\r\nFriendListItem.propTypes = {\r\n  avatar: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  isOnline: PropTypes.bool,\r\n};\r\n\r\nexport default FriendListItem;\r\n","// Компонент должен принимать один проп friends - массив объектов друзей.\r\n\r\n// Компонент должен создавать DOM следующей структуры.\r\n\r\n// <ul class=\"friend-list\">\r\n//   <!-- Произвольное кол-во FriendListItem -->\r\n// </ul>\r\n// Описание компонента <FriendListItem>\r\n// Компонент должен принимать несколько пропов:\r\n\r\n// avatar - ссылка на аватар\r\n// name - имя друга\r\n// isOnline - буль сигнализирующий о состоянии друга, в сети или нет.\r\n// В зависимости от пропа isOnline, должен меняться цвет фона span.status. Это можно сделать через разный CSS-класс или Styled Components.\r\n\r\n// Компонент должен создавать DOM следующей структуры.\r\n\r\n// <li class=\"item\">\r\n//   <span class=\"status\"></span>\r\n//   <img class=\"avatar\" src=\"\" alt=\"User avatar\" width=\"48\" />\r\n//   <p class=\"name\"></p>\r\n// </li>\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport FriendListItem from \"../FriendListItem/FriendListItem\";\r\nimport s from './FriendList.module.css'\r\n\r\nconst FriendList = ({ friends }) => {\r\n  return (\r\n    <ul className={s['friend-list']}>\r\n      {friends.map(({ avatar, name, isOnline, id }) => (\r\n              \r\n          <FriendListItem\r\n            keyId={id}\r\n            avatar={avatar}\r\n            name={name}\r\n            isOnline={isOnline}\r\n\r\n          />\r\n        \r\n          \r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nFriendList.prototype = {\r\n  friends: PropTypes.arrayOf(\r\n    PropTypes.shape({ id: PropTypes.string.isRequired })\r\n  ),\r\n};\r\n\r\nexport default FriendList;\r\n","// Компонент должен принимать два пропа title и stats, в которых указывается заголовок и объект статистики.\r\n\r\n// title - не обязателен, и если он не передан, не должна рендериться разметка заголовка <h2>.\r\n// stats - массив объектов содержащих информацию о элементе статистики. Может иметь произвольное кол-во элементов.\r\n// Цвет фона элемента статистики в оформлении можно пропустить, либо создать функцию для генерации случайного цвета.\r\n// Компонент должен создавать DOM элемент следующей структуры.\r\n\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport s from './StatisticItem.module.css'\r\nconst StatisticsItem = ({label ,percentage, id}) =>{\r\n    return (\r\n        <>\r\n        <span className={s.label}>{label}</span>\r\n       <span className={s.percentage}>{percentage}%</span>\r\n        </>\r\n    );\r\n};\r\n\r\nStatisticsItem.prototype = {\r\n    id : PropTypes.string,\r\n    label: PropTypes.string,\r\n    percentage : PropTypes.number,\r\n};\r\n\r\nexport default StatisticsItem;","import PropTypes from \"prop-types\"\r\nimport StatisticsItem from \"../StatisticsItem/StatisticsItem\"\r\nimport s from './Statistics.module.css'\r\n\r\n\r\nconst Statistics = ({stats, title})=>{\r\n    if (stats.length === 0) return null;\r\n    return(\r\n        <section className={s.statistics}>\r\n            <h2 className={s.title}>{title ? title.toUpperCase() : title=\"\"}</h2>\r\n            <ul className={s['stat-list']}>\r\n                \r\n        {stats.map((stat)=>(\r\n             <li key = {stat.id} className={s.item}>\r\n        <StatisticsItem\r\n        id={stat.id}\r\n        label={stat.label}\r\n        percentage={stat.percentage}\r\n        /> \r\n        </li>\r\n        ))}\r\n\r\n\r\n    </ul>\r\n    </section>\r\n);}\r\n\r\nStatistics.defaultProps = {\r\n    stats: [],\r\n  };\r\n\r\n\r\n  Statistics.propTypes = {\r\n    title: PropTypes.string,\r\n    stats: PropTypes.array.isRequired,\r\n  };\r\n\r\n  export default Statistics;","// Данные для списка доступны в формате JSON в файле transactions.json. Это массив объектов, каждый объект описывает одну транзакцию со следующими свойствами:\r\n\r\n// id — уникальный идентификатор транзакции\r\n// type — тип транзакции\r\n// amount - сумма транзакции\r\n// currency - тип валюты\r\n\r\n\r\n\r\n// Необходимо создать компонент <TransactionHistory> принимающий один проп items - массив объектов транзакций из transactions.json. Компонент создает разметку таблицы. Каждая транзакция это строка таблицы. В примере приведена разметка двух транзакций.\r\n\r\n\r\n// Пример использования\r\n// import transactions from 'путь/к/transactions.json';\r\n\r\n// <TransactionHistory items={transactions} />;\r\nimport PropTypes from \"prop-types\";\r\nimport s from './TransactionItem.module.css'\r\n\r\n\r\nconst TransactionItem =({id, type, amount, currency}) => {\r\n    return (\r\n        \r\n        < >\r\n          <td className={s.cell}>{type}</td>\r\n          <td className={s.cell}>{amount}</td>\r\n          <td className={s.cell}>{currency}</td>\r\n        </>\r\n      \r\n\r\n);} \r\n\r\nTransactionItem.prototype ={\r\n    id: PropTypes.string,\r\n    type: PropTypes.string,\r\n    amount :PropTypes.string,\r\n    currency:PropTypes.string,\r\n};\r\n\r\n\r\n\r\nexport default TransactionItem;","import PropTypes from \"prop-types\";\r\nimport TransactionItem from \"../TransactionItem/TransactionItem\";\r\nimport s from './TransactionHistory.module.css'\r\n\r\n\r\nconst TransactionHistory =({items})=>{\r\n    if (items.length === 0) return null;\r\n    return (\r\n         <table className={s['transaction-history']}>\r\n  <thead className={s['transaction-head']}>\r\n     <tr>\r\n       <th className={s['transaction-title']}>Type</th>\r\n       <th className={s['transaction-title']}>Amount</th>\r\n       <th className={s['transaction-title']}>Currency</th>\r\n     </tr>\r\n   </thead>\r\n   <tbody>\r\n       {items.map((item)=>(\r\n         <tr key={item.id} className={s['transaction-row']} >\r\n       <TransactionItem \r\n       id={items.id}\r\n       type = {item.type}\r\n       amount ={item.amount}\r\n       currency= {item.currency}\r\n       \r\n        />\r\n        </tr>\r\n       ))}\r\n   </tbody>\r\n\r\n   </table>\r\n    )\r\n};\r\n\r\nTransactionHistory.defaultProps = {\r\n    transactions: [],\r\n  };\r\n\r\n\r\nTransactionHistory.propTypes = {\r\n    \r\n    transactions: PropTypes.array.isRequired,\r\n  };\r\n\r\n  export default TransactionHistory;","import \"./App.css\";\r\n\r\nimport user from \"./data/user.json\";\r\nimport Profile from \"./components/Profile/Profile\";\r\n\r\nimport friends from \"./data/friends.json\";\r\nimport FriendList from \"./components/FriendList/FriendList\";\r\n\r\nimport data from './data/data.json'\r\nimport Statistics from './components/Statistics/Statistics'\r\n\r\nimport transactions from './data/transactions.json'\r\nimport TransactionHistory from './components/TransactionHistory/TransactionHistory'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Profile\r\n          username={user.username}\r\n          tag={user.tag}\r\n          location={user.location}\r\n          avatar={user.avatar}\r\n          stats={user.stats}\r\n        />\r\n        <FriendList friends={friends} />\r\n\r\n         <Statistics title=\"Upload stats\" stats={data} />\r\n         <Statistics stats={data} />\r\n\r\n         <TransactionHistory items={transactions} />\r\n\r\n      \r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}